name: Documentation

on:
  push:
    # tags:
    # - "*"
    branches: [ "main" ]
    # pull_request:
    #   branches: ["develop"]

jobs:
  deploy:
    name: Build and publish documentation
    runs-on: ubuntu-latest

    permissions:
      contents: write

    env:
      USERNAME: 3DBAG
      FEED_URL: https://nuget.pkg.github.com/3DBAG/index.json
      VCPKG_BINARY_SOURCES: "clear;nuget,https://nuget.pkg.github.com/3DBAG/index.json,readwrite"

    steps:
      - uses: actions/checkout@v4
      - uses: actions/github-script@v7
        with:
          script: |
            core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

      - uses: nixbuild/nix-quick-install-action@v30
        # uses: cachix/install-nix-action@v31
        # with:
        #   nix_path: nixpkgs=channel:nixos-unstable
        name: "install nix"

      - name: Restore uv cache
        uses: actions/cache@v4
        with:
          path: /tmp/.uv-cache
          key: uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}
          restore-keys: |
            uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}
            uv-${{ runner.os }}

      - uses: nicknovitski/nix-develop@v1
        env:
          # Configure a constant location for the uv cache
          UV_CACHE_DIR: /tmp/.uv-cache
        with:
          arguments: "--ignore-environment --keep ACTIONS_CACHE_URL --keep ACTIONS_RUNTIME_TOKEN --keep VCPKG_BINARY_SOURCES --keep UV_CACHE_DIR --impure"
        name: "nix develop"

      - name: Add NuGet sources
        shell: bash
        run: |
          mono `vcpkg fetch nuget | tail -n 1` \
            sources add \
            -Source "${{ env.FEED_URL }}" \
            -StorePasswordInClearText \
            -Name GitHubPackages \
            -UserName "${{ env.USERNAME }}" \
            -Password "${{ secrets.GH_PACKAGES_TOKEN }}"
          mono `vcpkg fetch nuget | tail -n 1` \
            setapikey "${{ secrets.GH_PACKAGES_TOKEN }}" \
            -Source "${{ env.FEED_URL }}"

      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: >
          cmake -B build
          --preset vcpkg-docs
          -DCMAKE_INSTALL_PREFIX=${{ github.workspace }}/install
          -S ${{ github.workspace }}

      - name: Build bindings
        # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
        run: |
          cmake --build build --config Release --verbose --preset gh-${{ runner.os }}
          cmake --install build --config Release --verbose

      - name: Generate Docs
        run: |
          cd docs
          make html

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ${{ github.workspace }}/docs/_build/html
          # destination_dir: dev
          publish_branch: gh-pages
